{"ast":null,"code":"// Módulo para detectar ingredientes usando la API de Clarifai\n\n/**\r\n * Detecta ingredientes en una imagen usando la API de Clarifai\r\n * @param {string} imageData - Imagen en formato base64 o URL\r\n * @param {boolean} isBase64 - Indica si la imagen está en formato base64\r\n * @returns {Promise} - Promise que resuelve a un array de ingredientes con su confianza\r\n */\nconst detectarIngredientes = async (imageData, isBase64 = true) => {\n  // Configuración de la API de Clarifai\n  const USER_ID = 'fotoreceta';\n  const APP_ID = 'foto_receta';\n  const API_KEY = '439349bc92b24932ac284b252b5b1f0c';\n  const MODEL_ID = 'food-item-recognition';\n  try {\n    // Preparar los datos para la petición\n    const raw = JSON.stringify({\n      \"user_app_id\": {\n        \"user_id\": USER_ID,\n        \"app_id\": APP_ID\n      },\n      \"inputs\": [{\n        \"data\": {\n          \"image\": isBase64 ? {\n            \"base64\": imageData.startsWith('data:image') ? imageData.split(',')[1] : imageData\n          } : {\n            \"url\": imageData\n          }\n        }\n      }]\n    });\n\n    // Configuración de la petición\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Authorization': 'Key ' + API_KEY\n      },\n      body: raw\n    };\n\n    // Realizar la petición a la API de Clarifai\n    const response = await fetch(`https://api.clarifai.com/v2/models/${MODEL_ID}/outputs`, requestOptions);\n    const result = await response.json();\n\n    // Verificar si hay errores en la respuesta\n    if (result.status && result.status.code !== 10000) {\n      throw new Error(`API Error: ${result.status.description}`);\n    }\n\n    // Si no hay conceptos, retornar array vacío\n    if (!result.outputs || !result.outputs[0] || !result.outputs[0].data || !result.outputs[0].data.concepts) {\n      return [];\n    }\n\n    // Procesar los ingredientes detectados\n    const ingredientes = result.outputs[0].data.concepts.map(concept => ({\n      nombre: concept.name,\n      confianza: concept.value\n    }));\n\n    // Filtrar solo los ingredientes con confianza mayor a 0.6\n    return ingredientes.filter(ingrediente => ingrediente.confianza > 0.6);\n  } catch (error) {\n    console.error('Error al detectar ingredientes:', error);\n    throw error;\n  }\n};\n\n/**\r\n * Convierte una imagen de File a base64\r\n * @param {File} file - Archivo de imagen\r\n * @returns {Promise} - Promise que resuelve a la imagen en formato base64\r\n */\nconst fileToBase64 = file => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve(reader.result);\n    reader.onerror = error => reject(error);\n  });\n};\n\n/**\r\n * Captura una imagen de la cámara y la convierte a base64\r\n * @param {HTMLVideoElement} videoElement - Elemento de video\r\n * @returns {Promise} - Promise que resuelve a la imagen en formato base64\r\n */\nconst captureImageFromCamera = videoElement => {\n  return new Promise((resolve, reject) => {\n    try {\n      const canvas = document.createElement('canvas');\n      canvas.width = videoElement.videoWidth;\n      canvas.height = videoElement.videoHeight;\n      const context = canvas.getContext('2d');\n      context.drawImage(videoElement, 0, 0, canvas.width, canvas.height);\n      const dataUrl = canvas.toDataURL('image/jpeg');\n      resolve(dataUrl);\n    } catch (error) {\n      reject(error);\n    }\n  });\n};\nexport { detectarIngredientes, fileToBase64, captureImageFromCamera };","map":{"version":3,"names":["detectarIngredientes","imageData","isBase64","USER_ID","APP_ID","API_KEY","MODEL_ID","raw","JSON","stringify","startsWith","split","requestOptions","method","headers","body","response","fetch","result","json","status","code","Error","description","outputs","data","concepts","ingredientes","map","concept","nombre","name","confianza","value","filter","ingrediente","error","console","fileToBase64","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","onerror","captureImageFromCamera","videoElement","canvas","document","createElement","width","videoWidth","height","videoHeight","context","getContext","drawImage","dataUrl","toDataURL"],"sources":["C:/Users/Usuario/Desktop/FotoReceta/src/services/detectarIngredientes.js"],"sourcesContent":["// Módulo para detectar ingredientes usando la API de Clarifai\r\n\r\n/**\r\n * Detecta ingredientes en una imagen usando la API de Clarifai\r\n * @param {string} imageData - Imagen en formato base64 o URL\r\n * @param {boolean} isBase64 - Indica si la imagen está en formato base64\r\n * @returns {Promise} - Promise que resuelve a un array de ingredientes con su confianza\r\n */\r\nconst detectarIngredientes = async (imageData, isBase64 = true) => {\r\n  // Configuración de la API de Clarifai\r\n  const USER_ID = 'fotoreceta';\r\n  const APP_ID = 'foto_receta';\r\n  const API_KEY = '439349bc92b24932ac284b252b5b1f0c';\r\n  const MODEL_ID = 'food-item-recognition';\r\n\r\n  try {\r\n    // Preparar los datos para la petición\r\n    const raw = JSON.stringify({\r\n      \"user_app_id\": {\r\n        \"user_id\": USER_ID,\r\n        \"app_id\": APP_ID\r\n      },\r\n      \"inputs\": [\r\n        {\r\n          \"data\": {\r\n            \"image\": isBase64 ? {\r\n              \"base64\": imageData.startsWith('data:image') \r\n                       ? imageData.split(',')[1] \r\n                       : imageData\r\n            } : {\r\n              \"url\": imageData\r\n            }\r\n          }\r\n        }\r\n      ]\r\n    });\r\n\r\n    // Configuración de la petición\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Authorization': 'Key ' + API_KEY\r\n      },\r\n      body: raw\r\n    };\r\n\r\n    // Realizar la petición a la API de Clarifai\r\n    const response = await fetch(\r\n      `https://api.clarifai.com/v2/models/${MODEL_ID}/outputs`, \r\n      requestOptions\r\n    );\r\n    \r\n    const result = await response.json();\r\n    \r\n    // Verificar si hay errores en la respuesta\r\n    if (result.status && result.status.code !== 10000) {\r\n      throw new Error(`API Error: ${result.status.description}`);\r\n    }\r\n\r\n    // Si no hay conceptos, retornar array vacío\r\n    if (!result.outputs || \r\n        !result.outputs[0] || \r\n        !result.outputs[0].data || \r\n        !result.outputs[0].data.concepts) {\r\n      return [];\r\n    }\r\n\r\n    // Procesar los ingredientes detectados\r\n    const ingredientes = result.outputs[0].data.concepts.map(concept => ({\r\n      nombre: concept.name,\r\n      confianza: concept.value\r\n    }));\r\n\r\n    // Filtrar solo los ingredientes con confianza mayor a 0.6\r\n    return ingredientes.filter(ingrediente => ingrediente.confianza > 0.6);\r\n    \r\n  } catch (error) {\r\n    console.error('Error al detectar ingredientes:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n/**\r\n * Convierte una imagen de File a base64\r\n * @param {File} file - Archivo de imagen\r\n * @returns {Promise} - Promise que resuelve a la imagen en formato base64\r\n */\r\nconst fileToBase64 = (file) => {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = () => resolve(reader.result);\r\n    reader.onerror = (error) => reject(error);\r\n  });\r\n};\r\n\r\n/**\r\n * Captura una imagen de la cámara y la convierte a base64\r\n * @param {HTMLVideoElement} videoElement - Elemento de video\r\n * @returns {Promise} - Promise que resuelve a la imagen en formato base64\r\n */\r\nconst captureImageFromCamera = (videoElement) => {\r\n  return new Promise((resolve, reject) => {\r\n    try {\r\n      const canvas = document.createElement('canvas');\r\n      canvas.width = videoElement.videoWidth;\r\n      canvas.height = videoElement.videoHeight;\r\n      \r\n      const context = canvas.getContext('2d');\r\n      context.drawImage(videoElement, 0, 0, canvas.width, canvas.height);\r\n      \r\n      const dataUrl = canvas.toDataURL('image/jpeg');\r\n      resolve(dataUrl);\r\n    } catch (error) {\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n\r\nexport { detectarIngredientes, fileToBase64, captureImageFromCamera };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}